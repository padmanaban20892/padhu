
Hapag-Lloyd :[Extenal] 28/09/2023
------------------------
1. 
Map<String,String> country = new HashMap();
country.put("IN","India")
country.put("JP","Japan") 
Map<String,String> countryNew = country

System.out.println(country==countryNew)
System.out.println(country.equals(countryNew))

---------------------------------------------
Program : aaabbccc => a3b2c3

2. Junit Testing - > How to write thre Function/Methods
3. Many to one Relationship 
4. Primary & forigen key Relationship which Enity
5. Many to one Relationship : Entity Parent & child assoicate -> get parent object only, avoid child object in assoication 
6. equals vs ==





Aspire Systems: [Extenal] 28/09/2023
-----------------------------------------
1. Spring boot embeed server ? - add anoter server - what are configuration
2. Spring boot - deafult deault design pattern ? why?
3. Spring boout autowired alternative @? 
4. @Qulafied 

Coding :

1. Below methods Correct or Not

method() {
String name = "Padmanaban";
List<String> names = new ArrayList<>();
names.add("name1");
names.add("name2");
names.add("name3");
names.forEach(element -> {
	name = name + element;
});
}


2. n of words -> space sperate & first letter each word capital using stream 


String name="";


Arrays.Stream(name.split("\\s")).map(str->str.subString(0,1).toUpperCase()+str.subString(1)).collect(Collectors.joining(" "));


3. 

nums = {5,2,7,6,2,5,6,2,1,6,2,6,1,9};


List of any given array USING STREAM, 
	i. maximum of number repeat number , 
	ii. IF 2 no of maximum repeat set , find minmium value - print. Example : 2,6 -> maximum repeat count , final output : 2 




Map<Integer,Integer> hashMap=new HashMap<>();

//find maximum repeat count 
for(int i=0;i<nums.length;i++){
	if(hashMap.containsKey(nums[i]){
	hashMap.put(nums[i], hashMap.get(nums[i])+1);
}else{
	hashMap.put(nums[i], 1);
}}



Iterator entriess=hashMap.entryset().iterator();
int maxcount=0;
int element=nums[0];

while(entriess.hasNext()){

Map.Entry entry=entriess.next();
int count = entry.getValue();

if(maxcount<count){
maxcount=count;
element=entry.getKey();
}
}

s.o.p("Maximum no of times"+element+" Maximum count :" +maxcount);










NMS -> 27/09/2023
--------------------------------
1. list of employee objects - Name,address sorting based lamba
2. Arraylist vs Linkedlist
3. Hibernate - Connection pool
4. Hibernate - @manytoMany - howmany table assocoate
5. Application server, which deployed platform enviorement.
6. @controlladvice & customException
7. Hibernate stages
8.Spring boot - Architcute priceple in API design
9.Hibenrate Store procdure tigger
10. Comparable vs compartor
11. market interface
12. Rest APi which authenation used, Swagger or openAPi
13. Spring boot - advantage, dependceny injction. Solid principle 
14 spring boot -  2 database - how to manage trancation
	1 - database is sccessfull
	2 - database is not failure, how manage the rollback.

6. (somnath.dutta1@wipro.com ) - Given Feedback
	1. all answer not clear, which you know the cleared answer, clear shot quick answar
	2. Example - Spring boot - why used there, which puropse, why need this 
	3. one point clear to answer,






=========================================
UHG:  -> 29/08/2023

-----
1. how to mock jpa repository using mockito
2. Spring @Bean When use, Which layer
3. @transactional when use, why not use Businness layer
4. Arraylist of 1 to 10, Print each number, remove Odd number Program
5. ConcurrentModificationException its Occurs?






============================================= 
LBG --> 25/08/2023

1, an you create an integer array, difference between int and integer, you know, wrapper classes?
7. convert this array to a stream and using the stream can you print uh, the odd numbers or can you find the first even number in this array?
2. String concat Method in java 8,11
3. how can we handle exceptions in Java?,  try catch inside a catch block?
4. can you just design a rest controller with a rest endpoint to find a customer by ID ,  roughly design the rest controller  -> program 
	Can you invoke a service layer
	we allowed to invoke a uh DAO layer from controller class
	connect to our service class and then from service class let's connect to repository.
	what kind of autowiring 
What is the context path?
5. What does functional programming mean? => Functional interface
6. create 2 string literals
8.executor services in in Java 8 to handle multi threading?
9. what are the keywords final, finally and finalize in Java?
10. single Singleton design pattern same as creating a static class?
11.  what are web services => many?
12. 
Do you have experience working with or building soap API?
13. Restful Web services as stateless.?
14. different ways you can inject a bean.
15. difference between at the rate service and at the rate component and springboot?
16. springboot we have something called as a startup parent
17.  what is the dependency?
18. difference between me and install and package?
19. I mean, what's your experience with microservices and microservices architecture?
20. Have you have you built any microservice?
21  GIT stash and pop  & git checkout vs Pull
22. What is the purpose of writing a J unit?
23. scrum methodologies
24.








=======================
Apple Project  - 25/08/2023
----------------


1. Intermediate & Termal operation java8
2. ShortCricut 
3. Java 8 - Default interface & static interface why intrdoce?
4. City, Salary in Employee sort -> Java 8 stream 
5. Spring beean -> SIngleton &Prorotype
6. Hibenrate Session vs Sessionfactory  -> both enable deafult ?  where enable?
7. 3rd highest Salary in sql 














===================


1. Abstraction vs encapusaltion
2. Abstact Method & class in java 8 ? how to achieve
3. Singleton class 
4. why String is immutable & create ?
5. Exception hernachy ? throw vs throws
6. How to call service to anoteher service in Rest call Expalin
7. Hibernate vs JPA
8. Session Factory vs Session
9. Array vs ArrayList, ArrayList vs Linkedlist
10. Arrays => ArrayList
11. comparator vs comparable
12. how to handle exception in Spring boot & rest call
13. hashMap internally
14. Avaoid Duplicate String in java
15.marker interface
16. serializtion











========================

JAVA Questions

 

1) About the project

 

2) Java 8 related questions

 

3) Count Duplicates in the string program

 

4) Sort the data using java8 program

 

5) Spring Boot annotations
https://www.bacancytechnology.com/blog/spring-boot-annotations
 

6) Microservices how to create server & client

 

7) Spring Boot profiles

 

8) SQL join queries





Interview Questions :
==========================================
below are the Client interview question asked me for SPGI/S&P account 
---------------------
•    What is AOP in spring? Do we modify our application code where we  login or we do something different in this?
•    For what you have used AOP in you projects
•    Do you know collections, what all collections you know about
•    Custom collection classes and handling the keys of hashmap of these classes
•    Do you know hash table – diff between hash table and hash map
•    What benefit and draw back it has if synchronized 
•    How map internally works
•    What is diff between synchronize vs lock?
•    Do you inner classes? What are the types of inner classes
•    What is Deep cloning and shadow cloning?
•    How we can do deep cloning object
•    How can we achieve deep cloning - write code for this
•    Do you know Serial version UID -is it necessary to provide? If you do not provide how it works?
•    In database what is diff between trunket and delete command?
•    Is there any performance different between delete and trunket?
•    Do you know database indexed? Why do we create?
•    Do you know what is volatile?
•    What are daemon threads?
•    What is diff between daemon thread and non-daemon threads?
•    Do you know what is completable future?
•    Do you work on multithreading? – what is diff between runnable and callable
•    What are the different modes of auto wiring incase of string
•    So @autowired , if we have to use auto wiring , then what are the ways of using auto wiring . I have a class and want to do autowiring how will you do it. 
•    What is difference between dependencies and plugins.
•    Do you know design  patterns ? what all design patterns you have worked on?
•    Types of class loaders
•    What is Reflection APIs and where to use
•    Find the closet combination of 0 in given array {-9,-3,1,4,7,10}
•    How to make immutable class - write code
•    How to make Singleton class and how can we break and its solution. - write code


Mohan Bench
----------------------

1. what do you mean by try with resource statements?  there are some still serialized and deserialized and we need to do so in those scenarios.
    how file wirte and close when exceptiion happen?
2. basic differences with like normal exception handling and try with resource handling. So what do you feel like? What it actually helping you out?
3. which interface is try resource using?
4.  what is internally? It is using the library, what it is actually internally doing.?
5. What is auto closable?

 

6. the use case for which you have used that multi threading?
7. you have 5 threads and you are using one thread means parallely if we're processing the five five student data but one of the data 
    is getting altered so will it be able to fit the latest data at that time for the one which is?
8. So how do we regret that you? You will not be definitely using in multithreaded will not do concurrent processing. 
    You will do parallel processing right?
9. want to execute that particular thread from the instance where it is lived out. So how how do you go? How do you how do we can process that? 
10. one thread modifying the data same time another thread try to modify hen that will be a conflicting situation and you may get in a situation get into a situation like deadlock situation, right?
    how do advert those the deadlock situations? thread safe.

 

11. what are the design patterns? What are the design patterns you have implemented so far?

 

12. what is the basic difference between spring and spring boot?
13. difference between controller and rest controller? That will also give you the answer for the spring and spring boot difference right?
14. what is the return type of rest controller, what is the return type of the method stand up for the controller? What can be the return type?
15. what is the return for spring MVC controller methods?

 

16. have you done any casting technique used? Any casting (cacheing) technique in hibernate? firdt level cache and second level cache?
17.  what is the phase type eager and of face type eager and face type lazy?
18. when do you need the eager fetch right? It will definitely.Uh performance is right. So when when do you think are eager face will be used then?

 

19. how do you handle the security part of a rest service? any kind of pattern or any kind of protocol that you have used for securing your developed services 
    so that nobody's so that any any of the external user cannot access just right away access your service right?
20. new controller again has to be wrapped with the security part, otherwise it will not be. It will be again accessed as a separate thing.
    So again some configuration or something you will be doing for your service to be make it secure right? - how new controller or api checked in security
21. hat kind of uh authentication you have used? There are several authentication types you can use protocol we say like basic, then JWT, 
    then what? Right? So any of this have you used in your service cart? -(frame work)
22. what type test suit used to testing? test tool
23. what are the deployement tool are you used?
24. hat kind of version control system you have used like we have so many so many right. 
    So which one you have used for committing the code and checking the versions like which commit version?
25. What is optional that is used in Java 8? Why? Why do we use that?
26. one value inside an optional optional or something then what? What it returns it gives what kind of object? - optional object
27. have you used default methods of Java 8 features? Means have you have you created in default methods?
28. There is a Class A and there is a interface B. There is a Class A and there is an interface B class is abstract class OK 
    and Class A is having a default having a method which is having a concrete method we can have concrete method in the abstract class as well right? 
    We can have abstract method we can have concrete method. So I have in class abstract class AI have a method which is a concrete method. 
    Then I will go to the interface. B, which is having a default method and both the.
    Uh, after Class E and interface B is having the same name for the method that is there in the default method. I have created one method,
    right that is the same name and providing here in the abstract class I will be same. So now I will have a this one. 
    I have Class C I'll extend this Class A and I'll implement this Class B interface D. 
    Then I will call that method Then which uh which which method implementation? It will take Class A or interface B? 
    I'm calling that method from Class C I'm calling, I can call that method definitely because I'm extending abstract Class A 
    and even I'm implementing class interface B, so definitely I will have an instance of that particular method in my class, right? 
    Like I'll call it. So when I'll call it then which implementation it will execute? 
    So when I'm calling I will give you a little bit more hint. 
    When I'm calling definitely I'm assigning that value to whichever I want, like I can assign that value to the interface instance. 
    Even I can assign that value to the abstract instance, right?
     answer - which instance you are using that method it taking-
    question  then here the concept of overriding is not working properly right? What do you think?

29.    So have you used a predicate?

 

30. I have one just small use case. I have some list of employees, right. 
Every employee is having a name having a name and a salary OK and I want to get the employee name which is having the highest salary? using Java 8?

 

 

---new
31. what is the use of Date time API, difference between noraml date and java 8 date time api. can you give me the ping me the quote for Florida time?
    What is the main advantages?
32. What is a draw back in the old day time API? Is it thread safe?
33. I have a class.The glass should be run every one hour.That last having one method. 
    The glass should run every one hour inside the method. What do you do? What do you will do using Spring? What is the annotation?
34.  I have a 5 tables OK, want to update the five tables one by one based on the business condition.First table I'm updating,
    Such a business condition I can Updated. Second table while updating the business condition is not matching or 
    something through the excess from something up. translation annotation What is the propagation? How would it how you are rollback it?
    I need the annotation with the param.What parameter you are sending to at transactional?
35. If you have a class.inside you have a method. When the server starts, you are putting into that method Basic variables and the basic 
    Attributes are basic params something throwt the application. That will work. 
    example pie value. You can configure it because many places you can use π value or anything else standard, something something, color something. 
    You can put it in. The thing that entire application is using the, No change at all. So when the server startup 
    it will it will the class will assign everything. How you can do that? -- How does server startup it will work. 
    I am talking about when the server start up not application start up in the server startup it it should pick and assign it.
    I don't want what is the final? How the value is assigned it OK whether it's a it can be changed or not.Doesn't matter, OK, but I need that 
    I have a class I am having such a variables which is across the application we are going to use it so it is one time it should be loaded. 
    So when the server startup it should work. Either after the server startup or before the application startup, 
    or during the application startup once the application is up, then the variables are very. That's it.

 

---new
36. scope of spring
37. singleton class
38. String s=" new String(" welcome");String s1="welcome";String s3=s.concat("wipro");
39. spring and springboot
40. what annotation used to call custom expection
41. difference throw and throws



Apple Account
================================
1. Given String, Find the maximum of occurence String characters.

/**
 * 
 */
package Java;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.stream.Collector;
import java.util.stream.Collectors;

/**
 * @author ArunachalamP
 *
 */
public class Occurence {

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String a="ABCCCDDD";
	
		Map<Character,Integer> occurence=new HashMap<Character, Integer>();
		
		for(int i=0;i<a.length();i++) {
			if(occurence.containsKey(a.charAt(i))) {
				occurence.put(a.charAt(i), occurence.get(a.charAt(i))+1);
			}else {
				occurence.put(a.charAt(i), 1);
			}
		}
		
		
		System.out.println("occurence Map:"+occurence.entrySet());
		
		Set<Entry<Character,Integer>> entitySet=occurence.entrySet();
		
		int maxCount=0;
		char maxChar=0;
		
		
		for(Entry<Character, Integer> entry:entitySet) {
			
			if(entry.getValue()>maxCount) {
				maxCount=entry.getValue();
				maxChar=entry.getKey();
			}
		}
		
		System.out.println("Maxium Occurence : "+maxChar);
		
		
	//Java 8 
		long max=maxCount;
		
	List<Character>	maxiumOcc= occurence.entrySet().stream().filter(e->e.getValue() == max)
		.map(Map.Entry::getKey).collect(Collectors.toList());
	
	System.out.println("Maxium Occurence : "+maxiumOcc);
		
		
		
	

	}

}

2. Find the integer , palindrome, Java 8 Streams


Citi Account 
--------------------
1. Rest Controller vs Controller
2. Thread Life cycle
3. volatile keyword vs synchronized
4. comparable interface vs comparator
5. Program => list of employee, Department wise calculate sum of salary 
6. why Sun System Introduced the String Pool and constant
7. Expain Deep Cloning vs Shawdow cloning
8. In avoid deadlock occurenc -> MultiThread Env 
9. why Singleton object reqied ? how to achequie
10. reentrantlock in java
11. object level lock and class level lock 


=============================


1)Capgemini -> Video Call Date: 18.04.2023
-----------------------------------------
1. Java 8 features
2. what is optional - where implemation in your project
3. what is flatmap
4. Spring boot configuration
5. spring boot integration websphere/webflux configuration
6. spring boot swagger configuration
7. swagger , implantation swagger spring boot, what use of swagger 
8. metaspace 
9. spring actuator and actuator configuration
10. Spring boot disavantage & advantages 
Spring Boot Advantages
1.Simplified & version conflict free dependency management through the starter POMs.
2.We can quickly setup and run standalone, web applications and micro services at very less time.
3.You can just assemble the jar artifact which comes with an embedded Tomact, Jetty or Undertow application server and you are ready to go.
4.Spring Boot provides HTTP endpoints to access application internals like detailed metrics, application inner working, health status, etc.
5.No XML based configurations at all. Very much simplified properties. The beans are initialized, configured and wired automatically.
6.The Spring Initializer provides a project generator to make you productive with the certain technology stack from the beginning. You can create a skeleton project with web, data access (relational and NoSQL datastores), cloud, or messaging support.

Disadvantages:
1.Spring boot may unnecessarily increase the deployment binary size with unused dependencies.
2.If you are a control freak, I doubt Spring Boot would fit your needs.
3.	Spring Boot sticks good with micro services. The Spring Boot artifacts can be deployed directly into Docker containers. In a large and monolithic based applications, I would not encourage you to use Spring Boot



------------------------------------------------
2)Experis IT -> 1st Level Date: 25.04.2023
----------------------------------------
1. Java 8,11 to 15
2. Spring, Spring boot
3. Cache many
4. constrctor & Construct reutrn values?
5. inner class
6. Whats are API working?
7. Batch ?
8. 


----------------------------------------------
3) DXC  -> Video Call Date:27.04.2023
-----------------------------------
1. Hashmap Internal working, hashing collision, methods 
2. Program 

int[] arryInt = {1,2,1,3,4,1,4,1}
Output: 
1  is repeated >> True
2 is repeated >> False
3 is repeated >> False
4 is repeated >> True

Repeated is true, Non - repeated is false

a. Without Collections
b. Time COmplex 
c. if using Collections & Sequence order Collection

3. Concurrent API
4, fail fast and fail safe 
5. Hash map vs Concurrent Hashmap 
6.Java 8 fateatures
	a. default methods
	b. deafult method dimand problem
	
7. Exception hireachy
	a. try with resource use ?
	b. custom exception - try with resource 
	
8. Immutable object 
	a. how to create immutable object
	b. which is immutable object in java
	
9. thread Pool
10. synchronization
11. Mulithread race condtion
12. JVM
	a. Memory type 
	b. stack memory 
	c. class loader type
	d. gc
	e. gc type
13.Solid Priciple
14. Design patten
	a. Abstact factory pattern
	
15. Spring
	a. Spring bean scope
	3. Spring core and mvc 
	c. Spring security
	4. Depency injection:
	5. autowired & types
	
16. Spring boot
	a. @AutoConfiguration details 
	b. actuator 
	
17.Microservice(ms) -> Commication one ms to inner ms
18. SQL :
	a.Index
	b. join
19. Hibernate
	a. Hibernate entity state
	b. Assoication
	c. Caching
20. Cloud - basic
21. JMS, acitve MQ, IBM Quuew, Kafka
22. Linux commands 


	
=======================interview prepations=====

https://workat.tech/
https://leetcode.com/problemset/all/
https://www.interviewbit.com/technical-interview-questions/
https://grow.google/intl/en_in/learn-skills/


==========================================
Infosys Date:06/05/2023  Video call

Two number sum
Given an array of integers, return the two numbers whose sum is equal to a given target
For example: array [7, 9, 5, 2, 4, 6]. Target = 15
Output – 9 , 6
Note:-

1.You can create your own array in main method with a set of values.
1. Hightest 2nd salary in employee table
2. SPRINGG BOOT APPLICATION Explain
3. HOW TO WORK SORING BOOT APPLICATION
4. HOW TO CREATE SPRING BOOT
5. GIT , JEKINDS INTEGRATED
6. Spring boot vs spring MVC
7. Depency injection
8.ioc
9. Microserivce , why?
10. How to communicate different microserivce
11. Different language microserive communication
12. Functional & logic microservice
13. Rest controller vs controller
14. Patch method in rest
15. Rest method
16. Rest intergeration method
17. Spring boot database intergeration
18. Rest swagger api integration
19. Rest testing how?
20. Singeton
21. Immutable class
22. Array vs ArrayList
23. Hashmap
24. Ploymorphism
25. Abstract & Interface


==========================================
ZemosoLabs Date:10/06/2023  video call


/ # // // Given an array of positive integers nums and a positive integer target,

// # // * return the minimal length of a contiguous * subarray

// # // [numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to the target.

// # // If there is no such subarray, return 0 instead.

// # // Input: target = 7, nums = [2,3,1,2,4,3]

// # // Output: 2

// # // Explanation: The subarray [4,3] has the minimal length


2. Loops Conepts Example of Code
3. Microserivce
4. Solid Priciple
5. Spring boot vs SPring
6. Design patten
7. Depency injection




